
program main
use gpu_kernels
implicit none
	integer i;
	integer :: N=100000

	!=============================================================
	! Проверка работоспособности распараллеливания двухмерного массива
	! device variable 

	type(dim3) ::dimGrid2, dimBlock2
	dimGrid2 = dim3(N*3/8+1,N*3/8+1,1)
	dimBlock2 = dim3(8,8,1)

	integer, parameter :: qwe=1000
	integer, device :: Nn_d
	real*8, device :: A_d(qwe), B_d(qwe), C_d(qwe,qwe)

	!host variable
	integer :: Nn_h = qwe, i, j
	real*8:: A_h(qwe), B_h(qwe), C_h(qwe,qwe)

	!=============================================================
	! Проверка работоспособности распараллеливания трехмерного массива
	! device variable 
	! 

	!TODO:
	!	посмотреть в чем проблема и с какого значения индекса z она начинается

	! PROBLEM:
	!		Почемуто правильно считает только при MUL3_d(*,*,8). После увеличения третьей координаты считает неправильно
	!		Еще проблема: если ставить (10,10,10) то все нормально считает, но стоит только увеличить первые две координаты
	!		как третью он считает правильно только до 8.
	!		Странно еще то, что при двумерном массиве все обрабатывается правильно и при огромных размерах массива,
	!		а в трехмерных массивах, даже небольшой массив он считает неправильно.
	integer, parameter :: qw=70

	type(dim3) ::dimGrid3, dimBlock3
	dimGrid3 = dim3(qw/5+1,qw/5+1,qw/15+1)
	dimBlock3 = dim3(5,5,qw)

	integer, device :: Nn3_d
	real*8, device :: A3_d(qw), B3_d(qw), C3_d(qw), MUL3_d(qw,qw,qw)

	!host variable
	integer :: Nn3_h = qw, i3, j3, k3
	real*8 :: A3_h(qw), B3_h(qw), C3_h(qw), MUL3_h(qw,qw,qw)

	!==================================================================================
	! Проверка работоспособности распараллеливания двухмерного массива
	A_h = 2
	B_h = 3

	A_d = A_h
	B_d = B_h
	Nn_d = Nn_h
	!==================================================================================
	! Проверка работоспособности распараллеливания трехмерного массива
	A3_h = 2
	B3_h = 1
	C3_h = 3
	
	A3_d = A3_h
	B3_d = B3_h
	C3_d = C3_h
	Nn3_d = Nn3_h

	!вызов ядра для двухмерного массива
	!call check_duble_multiplication<<<dimGrid2, dimBlock2>>>(A_d, B_d, C_d, Nn_d)
	
	!вызов ядра для трехмерного массива
	call check_tripple_multiplication<<<dimGrid3, dimBlock3>>>(A3_d, B3_d, C3_d, MUL3_d, Nn3_d)

	!==============================================================================
	C_h = C_d
	write (*,*) "----------C_d(i)--------------"
	do j=1,qwe
		do i=1,qwe
			!write (*,*) i,j,C_h(j,i)
		enddo
	enddo

	!==============================================================================
	MUL3_h = MUL3_d
	write (*,*) "----------MUL3_d(i)--------------"
	do k3=1,qw
		do j3=1,qw
			do i3=1,qw
				write (*,*) i3,j3,k3,MUL3_h(i3,j3,k3)
			enddo
		enddo
	enddo
	read(*,*)
end