module gpu_kernels
	use cudafor

	contains

	attributes(global) subroutine full_vcv_call(VCV, x, Y, Z, NI, NJ, NK, NDI, NDJ, NDK)
		integer, device :: NI, NJ, NK, NDI, NDJ, NDK
		real*8,  device :: X(NI), Y(NJ), Z(NK), VCV(NI*NJ*NK)

		i=(blockidx%x-1) * blockdim%x + threadidx%x

		if((i>=1).and.(i<=NI*NJ*NK))&
		VCV(MOD((i-1),NI)+1 + (MOD(INT((i-1)/NI),NJ)+1-1)*NI + (INT((i-1)/(NJ*NI))+1-1)*NI*NJ) = &
		X(MOD((i-1),NI)+1) * Y(MOD(INT((i-1)/NI),NJ)+1) * Z(INT((i-1)/(NJ*NI))+1)			

	end subroutine

	!------------------------------------------------------------------------------------------------------------------------------
	! ПРОЦЕДУРА ДЛЯ ТОГО ЧТОБЫ ЗАПОЛНЯТЬ ЧАСТИ ОДНОМЕРНОГО МАССИВА NDI - НОМЕР ЧАСТИ МАССИВА
	attributes(global) subroutine full_x_call(X, NI, NDI)
		integer, device :: NI, NDI
		real*8,  device :: X(NI)

		i=(blockidx%x-1) * blockdim%x + threadidx%x

		if((i>=1).and.(i<=NI)) X(i) = i + (NI-1)*(NDI-1)

	end subroutine
	!------------------------------------------------------------------------------------------------------------------------------
	attributes(global) subroutine full_xyz(X, Y, Z, NI, NJ, NK)
		integer, device :: NI, NJ, NK
		real*8,  device :: X(NI), Y(NJ), Z(NK)

		i=(blockidx%x-1) * blockdim%x + threadidx%x

		if((i>=1).and.(i<=NI)) X(i) = i
		if((i>=1+NI).and.(i<=NI+NJ)) Y(i-NI) = i-NI
		if((i>=1+NI+NJ).and.(i<=NI+NJ+NK)) Z(i-NI-NJ) = i-NI-NJ

	end subroutine

	attributes(global) subroutine full_vcv(VCV, X, Y, Z, NI, NJ, NK)
		integer, device :: NI, NJ, NK, i
		real*8,  device :: X(NI), Y(NJ), Z(NK), VCV(NI*NJ*NK)

		i=(blockidx%x-1) * blockdim%x + threadidx%x

		if((i>=1).and.(i<=NI*NJ*NK))&
		VCV(MOD((i-1),NI)+1 + (MOD(INT((i-1)/NI),NJ)+1-1)*NI + (INT((i-1)/(NJ*NI))+1-1)*NI*NJ) = &
		X(MOD((i-1),NI)+1) * Y(MOD(INT((i-1)/NI),NJ)+1) * Z(INT((i-1)/(NJ*NI))+1)

	end subroutine


	!------------------------------------------------------------------------------------------------------------------------------

	attributes(global) subroutine div_x(X, Y, Z, NI, NJ, NK, bd)
		integer, device :: ii, NI, NJ, NK
		real*8,  device :: X(NI), Y(NJ), Z(NK)
		logical, device :: bd(3,3,3)

		i=(blockidx%x-1) * blockdim%x + threadidx%x

		!if((i>=2).and.(i<=NI-1)) X(i) = i
		if((i>=1).and.(i<=NI)) X(i) = i
		if((bd(1,1,1).or.bd(1,1,2).or.bd(1,1,3).or.bd(1,2,1).or.bd(1,2,2).or.bd(1,2,3).or.bd(1,3,1).or.bd(1,3,2).or.bd(1,3,3))&
			.and.(i==1)) X(i) = 0
		!if(.not.(bd(1,1,1).or.bd(1,1,2).or.bd(1,1,3).or.bd(1,2,1).or.bd(1,2,2).or.bd(1,2,3).or.bd(1,3,1).or.bd(1,3,2).or.bd(1,3,3))&
		!	.and.(i==1)) X(i) = i
		if((bd(3,1,1).or.bd(3,1,2).or.bd(3,1,3).or.bd(3,2,1).or.bd(3,2,2).or.bd(3,2,3).or.bd(3,3,1).or.bd(3,3,2).or.bd(3,3,3))&
		    .and.(i==NI)) X(i) = 0
		!if(.not.(bd(3,1,1).or.bd(3,1,2).or.bd(3,1,3).or.bd(3,2,1).or.bd(3,2,2).or.bd(3,2,3).or.bd(3,3,1).or.bd(3,3,2).or.bd(3,3,3))&
		!    .and.(i==NI)) X(i) = i

		!if((i>=2+NI).and.(i<=NI+NJ-1)) Y(i-NI) = i-NI
		if((i>=1+NI).and.(i<=NI+NJ)) Y(i-NI) = i-NI
		if((bd(1,1,1).or.bd(1,1,2).or.bd(1,1,3).or.bd(2,1,1).or.bd(2,1,2).or.bd(2,1,3).or.bd(3,1,1).or.bd(3,1,2).or.bd(3,1,3))&
			.and.(i==1+NI)) Y(i-NI) = 0
		!if(.not.(bd(1,1,1).or.bd(1,1,2).or.bd(1,1,3).or.bd(2,1,1).or.bd(2,1,2).or.bd(2,1,3).or.bd(3,1,1).or.bd(3,1,2).or.bd(3,1,3))&
		!	.and.(i==1+NI)) Y(i-NI) = i-NI
		if((bd(1,3,1).or.bd(1,3,2).or.bd(1,3,3).or.bd(2,3,1).or.bd(2,3,2).or.bd(2,3,3).or.bd(3,3,1).or.bd(3,3,2).or.bd(3,3,3))&
			.and.(i==NI+NJ)) Y(i-NI) = 0
		!if(.not.(bd(1,3,1).or.bd(1,3,2).or.bd(1,3,3).or.bd(2,3,1).or.bd(2,3,2).or.bd(2,3,3).or.bd(3,3,1).or.bd(3,3,2).or.bd(3,3,3))&
		!	.and.(i==NI+NJ)) Y(i-NI) = i-NI

		!if((i>=2+NI+NJ).and.(i<=NI+NJ+NK-1)) Z(i-NI-NJ) = i-NI-NJ
		if((i>=1+NI+NJ).and.(i<=NI+NJ+NK)) Z(i-NI-NJ) = i-NI-NJ
		if((bd(1,1,1).or.bd(1,2,1).or.bd(1,3,1).or.bd(2,1,1).or.bd(2,2,1).or.bd(2,3,1).or.bd(3,1,1).or.bd(3,2,1).or.bd(3,3,1))&
			.and.(i==1+NI+NJ)) Z(i-NI-NJ) = 0
		!if(.not.(bd(1,1,1).or.bd(1,2,1).or.bd(1,3,1).or.bd(2,1,1).or.bd(2,2,1).or.bd(2,3,1).or.bd(3,1,1).or.bd(3,2,1).or.bd(3,3,1))&
		!	.and.(i==1+NI+NJ)) Z(i-NI-NJ) = i-NI-NJ
		if((bd(1,1,3).or.bd(1,2,3).or.bd(1,3,3).or.bd(2,1,3).or.bd(2,2,3).or.bd(2,3,3).or.bd(3,1,3).or.bd(3,2,3).or.bd(3,3,3))&
			.and.(i==NI+NJ+NK)) Z(i-NI-NJ) = 0
		!if(.not.(bd(1,1,3).or.bd(1,2,3).or.bd(1,3,3).or.bd(2,1,3).or.bd(2,2,3).or.bd(2,3,3).or.bd(3,1,3).or.bd(3,2,3).or.bd(3,3,3))&
		!	.and.(i==NI+NJ+NK)) Z(i-NI-NJ) = i-NI-NJ
		 
	end subroutine

	attributes(global) subroutine div_vcv(F, X, Y, Z, NI, NJ, NK)
		integer, device :: ii, NI, NJ, NK
		real*8,  device :: X(NI), Y(NJ), Z(NK), F(NI*NJ*NK)
		logical, device :: bd(3,3,3)

		i=(blockidx%x-1) * blockdim%x + threadidx%x

		F(MOD((i-1),NI)+1 + (MOD(INT((i-1)/NI),NJ)+1-1)*NI + (INT((i-1)/(NJ*NI))+1-1)*NI*NJ) = &
		X(MOD((i-1),NI)+1) * Y(MOD(INT((i-1)/NI),NJ)+1) * Z(INT((i-1)/(NJ*NI))+1)

	end subroutine

	attributes(global) subroutine div_qub(X, NI, NJ, NK)
		integer, device :: ii, NI, NJ, NK
		real*8, device :: X((NI+1)*(NJ+1)*(NK+1))

		i=(blockidx%x-1) * blockdim%x + threadidx%x
		if((i>=1).and.(i<=(NI+1)*(NJ+1)*(NK+1)).and.((MOD((i-1),NI)+1).EQ.1).or.((MOD(INT((i-1)/NI),NJ)+1).EQ.1).or.((INT((i-1)/(NJ*NI))+1).EQ.1).or.&
			 ((MOD((i-1),NI)+1).EQ.(NI+1)).or.((MOD(INT((i-1)/NI),NJ)+1).EQ.(NJ+1)).or.((INT((i-1)/(NJ*NI))+1).EQ.(NK+1))) then
			 X(MOD((i-1),NI+1)+1 + (MOD(INT((i-1)/(NI+1)),(NJ+1))+1-1)*(NI+1) + (INT((i-1)/((NJ+1)*(NI+1)))+1-1)*(NI+1)*(NJ+1)) = 0
		endif		

		if((i>=1).and.(i<=(NI+1)*(NJ+1)*(NK+1)).and.((MOD((i-1),NI)+1).NE.1).and.((MOD(INT((i-1)/NI),NJ)+1).NE.1).and.((INT((i-1)/(NJ*NI))+1).NE.1).and.&
			 ((MOD((i-1),NI)+1).NE.(NI+1)).and.((MOD(INT((i-1)/NI),NJ)+1).NE.(NJ+1)).and.((INT((i-1)/(NJ*NI))+1).NE.(NK+1))) then
			 X(MOD((i-1),NI+1)+1 + (MOD(INT((i-1)/(NI+1)),(NJ+1))+1-1)*(NI+1) + (INT((i-1)/((NJ+1)*(NI+1)))+1-1)*(NI+1)*(NJ+1)) = 1
		endif

	end subroutine

end module